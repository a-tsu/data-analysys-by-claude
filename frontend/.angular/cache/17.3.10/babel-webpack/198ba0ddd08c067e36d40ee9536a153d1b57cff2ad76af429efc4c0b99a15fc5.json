{"ast":null,"code":"import { MatrixViewComponent } from './matrix-view.component';\nconst meta = {\n  title: 'Components/MatrixView',\n  component: MatrixViewComponent,\n  parameters: {\n    layout: 'padded'\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    salesData: {\n      description: '売上データの配列',\n      control: {\n        type: 'object'\n      }\n    },\n    customerData: {\n      description: '顧客データの配列',\n      control: {\n        type: 'object'\n      }\n    },\n    chartData: {\n      description: 'チャートデータ',\n      control: {\n        type: 'object'\n      }\n    }\n  }\n};\nexport default meta;\n// Generate comprehensive sample data\nconst generateSalesData = () => {\n  const categories = ['Electronics', 'Books', 'Clothing', 'Home', 'Sports'];\n  const regions = ['東京', '大阪', '名古屋', '福岡', '札幌'];\n  const data = [];\n  for (let month = 1; month <= 12; month++) {\n    categories.forEach(category => {\n      regions.forEach(region => {\n        // Generate multiple entries per category/region/month\n        for (let i = 0; i < Math.floor(Math.random() * 5) + 3; i++) {\n          data.push({\n            date: new Date(2024, month - 1, Math.floor(Math.random() * 28) + 1),\n            sales: Math.floor(Math.random() * 200000) + 50000,\n            category,\n            region\n          });\n        }\n      });\n    });\n  }\n  return data;\n};\nconst generateCustomerData = () => {\n  const genders = ['男性', '女性'];\n  const data = [];\n  for (let i = 1; i <= 200; i++) {\n    data.push({\n      customer_id: `C${String(i).padStart(3, '0')}`,\n      age: Math.floor(Math.random() * 50) + 18,\n      // 18-67\n      gender: genders[Math.floor(Math.random() * genders.length)],\n      purchase_amount: Math.floor(Math.random() * 500000) + 10000,\n      satisfaction: Math.floor(Math.random() * 5) + 1 // 1-5\n    });\n  }\n  return data;\n};\nconst sampleSalesData = generateSalesData();\nconst sampleCustomerData = generateCustomerData();\nconst sampleChartData = {\n  line_chart: [{\n    x: '2024-01',\n    y: 1500000\n  }, {\n    x: '2024-02',\n    y: 1800000\n  }, {\n    x: '2024-03',\n    y: 1600000\n  }],\n  pie_chart: [{\n    x: 'Electronics',\n    y: 3500000\n  }, {\n    x: 'Books',\n    y: 2800000\n  }],\n  bar_chart: [{\n    x: '東京',\n    y: 4500000\n  }, {\n    x: '大阪',\n    y: 3200000\n  }],\n  histogram: [25, 30, 35, 40, 45]\n};\nexport const Default = {\n  args: {\n    salesData: sampleSalesData,\n    customerData: sampleCustomerData,\n    chartData: sampleChartData\n  }\n};\nexport const SmallDataset = {\n  args: {\n    salesData: [{\n      date: new Date('2024-01-15'),\n      sales: 125000,\n      category: 'Electronics',\n      region: '東京'\n    }, {\n      date: new Date('2024-01-16'),\n      sales: 89000,\n      category: 'Books',\n      region: '大阪'\n    }, {\n      date: new Date('2024-02-15'),\n      sales: 156000,\n      category: 'Electronics',\n      region: '東京'\n    }, {\n      date: new Date('2024-02-16'),\n      sales: 203000,\n      category: 'Clothing',\n      region: '名古屋'\n    }],\n    customerData: [{\n      customer_id: 'C001',\n      age: 28,\n      gender: '男性',\n      purchase_amount: 125000,\n      satisfaction: 4\n    }, {\n      customer_id: 'C002',\n      age: 35,\n      gender: '女性',\n      purchase_amount: 89000,\n      satisfaction: 5\n    }, {\n      customer_id: 'C003',\n      age: 45,\n      gender: '男性',\n      purchase_amount: 156000,\n      satisfaction: 3\n    }, {\n      customer_id: 'C004',\n      age: 65,\n      gender: '女性',\n      purchase_amount: 203000,\n      satisfaction: 2\n    }],\n    chartData: sampleChartData\n  }\n};\nexport const SingleCategoryRegion = {\n  args: {\n    salesData: [{\n      date: new Date('2024-01-15'),\n      sales: 125000,\n      category: 'Electronics',\n      region: '東京'\n    }, {\n      date: new Date('2024-01-16'),\n      sales: 89000,\n      category: 'Electronics',\n      region: '東京'\n    }, {\n      date: new Date('2024-01-17'),\n      sales: 156000,\n      category: 'Electronics',\n      region: '東京'\n    }],\n    customerData: [{\n      customer_id: 'C001',\n      age: 28,\n      gender: '男性',\n      purchase_amount: 125000,\n      satisfaction: 4\n    }, {\n      customer_id: 'C002',\n      age: 29,\n      gender: '女性',\n      purchase_amount: 89000,\n      satisfaction: 4\n    }],\n    chartData: sampleChartData\n  }\n};\nexport const HighSatisfactionCustomers = {\n  args: {\n    salesData: sampleSalesData.slice(0, 20),\n    customerData: sampleCustomerData.slice(0, 50).map(customer => ({\n      ...customer,\n      satisfaction: Math.floor(Math.random() * 2) + 4 // 4-5 only\n    })),\n    chartData: sampleChartData\n  }\n};\nexport const LowSatisfactionCustomers = {\n  args: {\n    salesData: sampleSalesData.slice(0, 20),\n    customerData: sampleCustomerData.slice(0, 50).map(customer => ({\n      ...customer,\n      satisfaction: Math.floor(Math.random() * 2) + 1 // 1-2 only\n    })),\n    chartData: sampleChartData\n  }\n};\nexport const WideAgeRange = {\n  args: {\n    salesData: sampleSalesData.slice(0, 30),\n    customerData: [...Array.from({\n      length: 20\n    }, (_, i) => ({\n      customer_id: `C${String(i + 1).padStart(3, '0')}`,\n      age: 18 + i,\n      // 18-37\n      gender: i % 2 === 0 ? '男性' : '女性',\n      purchase_amount: Math.floor(Math.random() * 100000) + 50000,\n      satisfaction: Math.floor(Math.random() * 5) + 1\n    })), ...Array.from({\n      length: 20\n    }, (_, i) => ({\n      customer_id: `C${String(i + 21).padStart(3, '0')}`,\n      age: 40 + i,\n      // 40-59\n      gender: i % 2 === 0 ? '男性' : '女性',\n      purchase_amount: Math.floor(Math.random() * 200000) + 100000,\n      satisfaction: Math.floor(Math.random() * 5) + 1\n    })), ...Array.from({\n      length: 10\n    }, (_, i) => ({\n      customer_id: `C${String(i + 41).padStart(3, '0')}`,\n      age: 60 + i,\n      // 60-69\n      gender: i % 2 === 0 ? '男性' : '女性',\n      purchase_amount: Math.floor(Math.random() * 150000) + 75000,\n      satisfaction: Math.floor(Math.random() * 5) + 1\n    }))],\n    chartData: sampleChartData\n  }\n};\nexport const EmptyData = {\n  args: {\n    salesData: [],\n    customerData: [],\n    chartData: {\n      line_chart: [],\n      pie_chart: [],\n      bar_chart: [],\n      histogram: []\n    }\n  }\n};\nexport const NullData = {\n  args: {\n    salesData: null,\n    customerData: null,\n    chartData: null\n  }\n};","map":{"version":3,"names":["MatrixViewComponent","meta","title","component","parameters","layout","tags","argTypes","salesData","description","control","type","customerData","chartData","generateSalesData","categories","regions","data","month","forEach","category","region","i","Math","floor","random","push","date","Date","sales","generateCustomerData","genders","customer_id","String","padStart","age","gender","length","purchase_amount","satisfaction","sampleSalesData","sampleCustomerData","sampleChartData","line_chart","x","y","pie_chart","bar_chart","histogram","Default","args","SmallDataset","SingleCategoryRegion","HighSatisfactionCustomers","slice","map","customer","LowSatisfactionCustomers","WideAgeRange","Array","from","_","EmptyData","NullData"],"sources":["/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.stories.ts"],"sourcesContent":["import { MatrixViewComponent } from './matrix-view.component';\nconst meta = {\n    title: 'Components/MatrixView',\n    component: MatrixViewComponent,\n    parameters: {\n        layout: 'padded',\n    },\n    tags: ['autodocs'],\n    argTypes: {\n        salesData: {\n            description: '売上データの配列',\n            control: { type: 'object' },\n        },\n        customerData: {\n            description: '顧客データの配列',\n            control: { type: 'object' },\n        },\n        chartData: {\n            description: 'チャートデータ',\n            control: { type: 'object' },\n        },\n    },\n};\nexport default meta;\n// Generate comprehensive sample data\nconst generateSalesData = () => {\n    const categories = ['Electronics', 'Books', 'Clothing', 'Home', 'Sports'];\n    const regions = ['東京', '大阪', '名古屋', '福岡', '札幌'];\n    const data = [];\n    for (let month = 1; month <= 12; month++) {\n        categories.forEach(category => {\n            regions.forEach(region => {\n                // Generate multiple entries per category/region/month\n                for (let i = 0; i < Math.floor(Math.random() * 5) + 3; i++) {\n                    data.push({\n                        date: new Date(2024, month - 1, Math.floor(Math.random() * 28) + 1),\n                        sales: Math.floor(Math.random() * 200000) + 50000,\n                        category,\n                        region\n                    });\n                }\n            });\n        });\n    }\n    return data;\n};\nconst generateCustomerData = () => {\n    const genders = ['男性', '女性'];\n    const data = [];\n    for (let i = 1; i <= 200; i++) {\n        data.push({\n            customer_id: `C${String(i).padStart(3, '0')}`,\n            age: Math.floor(Math.random() * 50) + 18, // 18-67\n            gender: genders[Math.floor(Math.random() * genders.length)],\n            purchase_amount: Math.floor(Math.random() * 500000) + 10000,\n            satisfaction: Math.floor(Math.random() * 5) + 1 // 1-5\n        });\n    }\n    return data;\n};\nconst sampleSalesData = generateSalesData();\nconst sampleCustomerData = generateCustomerData();\nconst sampleChartData = {\n    line_chart: [\n        { x: '2024-01', y: 1500000 },\n        { x: '2024-02', y: 1800000 },\n        { x: '2024-03', y: 1600000 },\n    ],\n    pie_chart: [\n        { x: 'Electronics', y: 3500000 },\n        { x: 'Books', y: 2800000 },\n    ],\n    bar_chart: [\n        { x: '東京', y: 4500000 },\n        { x: '大阪', y: 3200000 },\n    ],\n    histogram: [25, 30, 35, 40, 45]\n};\nexport const Default = {\n    args: {\n        salesData: sampleSalesData,\n        customerData: sampleCustomerData,\n        chartData: sampleChartData,\n    },\n};\nexport const SmallDataset = {\n    args: {\n        salesData: [\n            { date: new Date('2024-01-15'), sales: 125000, category: 'Electronics', region: '東京' },\n            { date: new Date('2024-01-16'), sales: 89000, category: 'Books', region: '大阪' },\n            { date: new Date('2024-02-15'), sales: 156000, category: 'Electronics', region: '東京' },\n            { date: new Date('2024-02-16'), sales: 203000, category: 'Clothing', region: '名古屋' },\n        ],\n        customerData: [\n            { customer_id: 'C001', age: 28, gender: '男性', purchase_amount: 125000, satisfaction: 4 },\n            { customer_id: 'C002', age: 35, gender: '女性', purchase_amount: 89000, satisfaction: 5 },\n            { customer_id: 'C003', age: 45, gender: '男性', purchase_amount: 156000, satisfaction: 3 },\n            { customer_id: 'C004', age: 65, gender: '女性', purchase_amount: 203000, satisfaction: 2 },\n        ],\n        chartData: sampleChartData,\n    },\n};\nexport const SingleCategoryRegion = {\n    args: {\n        salesData: [\n            { date: new Date('2024-01-15'), sales: 125000, category: 'Electronics', region: '東京' },\n            { date: new Date('2024-01-16'), sales: 89000, category: 'Electronics', region: '東京' },\n            { date: new Date('2024-01-17'), sales: 156000, category: 'Electronics', region: '東京' },\n        ],\n        customerData: [\n            { customer_id: 'C001', age: 28, gender: '男性', purchase_amount: 125000, satisfaction: 4 },\n            { customer_id: 'C002', age: 29, gender: '女性', purchase_amount: 89000, satisfaction: 4 },\n        ],\n        chartData: sampleChartData,\n    },\n};\nexport const HighSatisfactionCustomers = {\n    args: {\n        salesData: sampleSalesData.slice(0, 20),\n        customerData: sampleCustomerData.slice(0, 50).map(customer => ({\n            ...customer,\n            satisfaction: Math.floor(Math.random() * 2) + 4 // 4-5 only\n        })),\n        chartData: sampleChartData,\n    },\n};\nexport const LowSatisfactionCustomers = {\n    args: {\n        salesData: sampleSalesData.slice(0, 20),\n        customerData: sampleCustomerData.slice(0, 50).map(customer => ({\n            ...customer,\n            satisfaction: Math.floor(Math.random() * 2) + 1 // 1-2 only\n        })),\n        chartData: sampleChartData,\n    },\n};\nexport const WideAgeRange = {\n    args: {\n        salesData: sampleSalesData.slice(0, 30),\n        customerData: [\n            ...Array.from({ length: 20 }, (_, i) => ({\n                customer_id: `C${String(i + 1).padStart(3, '0')}`,\n                age: 18 + i, // 18-37\n                gender: i % 2 === 0 ? '男性' : '女性',\n                purchase_amount: Math.floor(Math.random() * 100000) + 50000,\n                satisfaction: Math.floor(Math.random() * 5) + 1\n            })),\n            ...Array.from({ length: 20 }, (_, i) => ({\n                customer_id: `C${String(i + 21).padStart(3, '0')}`,\n                age: 40 + i, // 40-59\n                gender: i % 2 === 0 ? '男性' : '女性',\n                purchase_amount: Math.floor(Math.random() * 200000) + 100000,\n                satisfaction: Math.floor(Math.random() * 5) + 1\n            })),\n            ...Array.from({ length: 10 }, (_, i) => ({\n                customer_id: `C${String(i + 41).padStart(3, '0')}`,\n                age: 60 + i, // 60-69\n                gender: i % 2 === 0 ? '男性' : '女性',\n                purchase_amount: Math.floor(Math.random() * 150000) + 75000,\n                satisfaction: Math.floor(Math.random() * 5) + 1\n            }))\n        ],\n        chartData: sampleChartData,\n    },\n};\nexport const EmptyData = {\n    args: {\n        salesData: [],\n        customerData: [],\n        chartData: {\n            line_chart: [],\n            pie_chart: [],\n            bar_chart: [],\n            histogram: []\n        },\n    },\n};\nexport const NullData = {\n    args: {\n        salesData: null,\n        customerData: null,\n        chartData: null,\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}