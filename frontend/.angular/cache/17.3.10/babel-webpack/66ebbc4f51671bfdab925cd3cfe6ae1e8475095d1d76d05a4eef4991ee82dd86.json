{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.component.ts.scss?ngResource!=!/home/a-tsu/data-analysys-by-claude/frontend/node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=CiAgICAubWF0cml4LWNvbnRhaW5lciB7CiAgICAgIG1hcmdpbi10b3A6IDE2cHg7CiAgICAgIG92ZXJmbG93LXg6IGF1dG87CiAgICB9CgogICAgLm1hdHJpeC10YWJsZSB7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBtaW4td2lkdGg6IDYwMHB4OwogICAgfQoKICAgIC50b3RhbC1jZWxsIHsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7CiAgICB9CgogICAgdGgubWF0LWhlYWRlci1jZWxsIHsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzZjUxYjU7CiAgICAgIGNvbG9yOiB3aGl0ZTsKICAgIH0KCiAgICB0ZC5tYXQtY2VsbCB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgcGFkZGluZzogOHB4OwogICAgfQoKICAgIHRoLm1hdC1oZWFkZXItY2VsbCB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgcGFkZGluZzogOHB4OwogICAgfQoKICAgIC5tYXQtdGFiLWdyb3VwIHsKICAgICAgbWFyZ2luLXRvcDogMTZweDsKICAgIH0KCiAgICAubWF0LXRhYi1ib2R5LWNvbnRlbnQgewogICAgICBwYWRkaW5nOiAxNnB4IDA7CiAgICB9CiAg!/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.component.ts\";\nimport { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nlet MatrixViewComponent = class MatrixViewComponent {\n  constructor() {\n    this.salesData = null;\n    this.customerData = null;\n    this.chartData = null;\n    // カテゴリ×地域マトリクス\n    this.categoryRegionMatrix = [];\n    this.categoryRegionColumns = [];\n    this.regions = [];\n    this.categories = [];\n    // 年齢層×満足度マトリクス\n    this.ageSatisfactionMatrix = [];\n    this.ageSatisfactionColumns = [];\n    this.satisfactionLevels = [1, 2, 3, 4, 5];\n    // 月別×カテゴリマトリクス\n    this.monthCategoryMatrix = [];\n    this.monthCategoryColumns = [];\n  }\n  ngOnChanges(changes) {\n    if (changes['salesData'] || changes['customerData'] || changes['chartData']) {\n      this.updateMatrixData();\n    }\n  }\n  updateMatrixData() {\n    if (this.salesData && this.customerData) {\n      this.buildCategoryRegionMatrix();\n      this.buildAgeSatisfactionMatrix();\n      this.buildMonthCategoryMatrix();\n    }\n  }\n  buildCategoryRegionMatrix() {\n    if (!this.salesData) return;\n    // 地域とカテゴリの一覧を取得\n    this.regions = [...new Set(this.salesData.map(item => item.region))].sort();\n    this.categories = [...new Set(this.salesData.map(item => item.category))].sort();\n    // マトリクスデータを構築\n    this.categoryRegionMatrix = this.categories.map(category => {\n      const row = {\n        category\n      };\n      let total = 0;\n      this.regions.forEach(region => {\n        const sales = this.salesData.filter(item => item.category === category && item.region === region).reduce((sum, item) => sum + item.sales, 0);\n        row[region] = sales;\n        total += sales;\n      });\n      row.total = total;\n      return row;\n    });\n    // カラム定義を設定\n    this.categoryRegionColumns = ['category', ...this.regions, 'total'];\n  }\n  buildAgeSatisfactionMatrix() {\n    if (!this.customerData) return;\n    // 年齢層を定義\n    const ageGroups = ['18-29', '30-39', '40-49', '50-59', '60+'];\n    this.ageSatisfactionMatrix = ageGroups.map(ageGroup => {\n      const row = {\n        ageGroup\n      };\n      let total = 0;\n      this.satisfactionLevels.forEach(satisfaction => {\n        const count = this.customerData.filter(customer => {\n          const age = customer.age;\n          const isInAgeGroup = this.isInAgeGroup(age, ageGroup);\n          return isInAgeGroup && customer.satisfaction === satisfaction;\n        }).length;\n        row[`satisfaction_${satisfaction}`] = count;\n        total += count;\n      });\n      row.total = total;\n      return row;\n    });\n    // カラム定義を設定\n    this.ageSatisfactionColumns = ['ageGroup', ...this.satisfactionLevels.map(s => `satisfaction_${s}`), 'total'];\n  }\n  buildMonthCategoryMatrix() {\n    if (!this.salesData) return;\n    // 月別データを構築\n    const monthlyData = new Map();\n    this.salesData.forEach(item => {\n      const date = new Date(item.date);\n      const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n      if (!monthlyData.has(monthKey)) {\n        monthlyData.set(monthKey, new Map());\n      }\n      const monthData = monthlyData.get(monthKey);\n      const currentValue = monthData.get(item.category) || 0;\n      monthData.set(item.category, currentValue + item.sales);\n    });\n    // マトリクスデータを構築\n    this.monthCategoryMatrix = Array.from(monthlyData.entries()).sort((a, b) => a[0].localeCompare(b[0])).map(([month, categoryData]) => {\n      const row = {\n        month\n      };\n      let total = 0;\n      this.categories.forEach(category => {\n        const sales = categoryData.get(category) || 0;\n        row[category] = sales;\n        total += sales;\n      });\n      row.total = total;\n      return row;\n    });\n    // カラム定義を設定\n    this.monthCategoryColumns = ['month', ...this.categories, 'total'];\n  }\n  isInAgeGroup(age, ageGroup) {\n    switch (ageGroup) {\n      case '18-29':\n        return age >= 18 && age <= 29;\n      case '30-39':\n        return age >= 30 && age <= 39;\n      case '40-49':\n        return age >= 40 && age <= 49;\n      case '50-59':\n        return age >= 50 && age <= 59;\n      case '60+':\n        return age >= 60;\n      default:\n        return false;\n    }\n  }\n  formatCurrency(value) {\n    if (!value) return '¥0';\n    return new Intl.NumberFormat('ja-JP', {\n      style: 'currency',\n      currency: 'JPY',\n      minimumFractionDigits: 0\n    }).format(value);\n  }\n  static {\n    this.propDecorators = {\n      salesData: [{\n        type: Input\n      }],\n      customerData: [{\n        type: Input\n      }],\n      chartData: [{\n        type: Input\n      }]\n    };\n  }\n};\nMatrixViewComponent = __decorate([Component({\n  selector: 'app-matrix-view',\n  standalone: true,\n  imports: [CommonModule, MatTableModule, MatCardModule, MatTabsModule],\n  template: `\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>マトリクス表示</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <mat-tab-group>\n          <!-- 売上カテゴリ × 地域マトリクス -->\n          <mat-tab label=\"カテゴリ×地域\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"categoryRegionMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"category\">\n                  <th mat-header-cell *matHeaderCellDef>カテゴリ</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.category}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let region of regions\" [matColumnDef]=\"region\">\n                  <th mat-header-cell *matHeaderCellDef>{{region}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{formatCurrency(element[region])}}\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{formatCurrency(element.total)}}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"categoryRegionColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: categoryRegionColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n\n          <!-- 年齢層 × 満足度マトリクス -->\n          <mat-tab label=\"年齢層×満足度\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"ageSatisfactionMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"ageGroup\">\n                  <th mat-header-cell *matHeaderCellDef>年齢層</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.ageGroup}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let satisfaction of satisfactionLevels\" [matColumnDef]=\"'satisfaction_' + satisfaction\">\n                  <th mat-header-cell *matHeaderCellDef>満足度{{satisfaction}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{element['satisfaction_' + satisfaction] || 0}}人\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{element.total}}人\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"ageSatisfactionColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: ageSatisfactionColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n\n          <!-- 月別 × カテゴリマトリクス -->\n          <mat-tab label=\"月別×カテゴリ\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"monthCategoryMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"month\">\n                  <th mat-header-cell *matHeaderCellDef>月</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.month}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let category of categories\" [matColumnDef]=\"category\">\n                  <th mat-header-cell *matHeaderCellDef>{{category}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{formatCurrency(element[category])}}\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{formatCurrency(element.total)}}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"monthCategoryColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: monthCategoryColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n        </mat-tab-group>\n      </mat-card-content>\n    </mat-card>\n  `,\n  styles: [__NG_CLI_RESOURCE__0]\n})], MatrixViewComponent);\nexport { MatrixViewComponent };","map":{"version":3,"names":["__decorate","__NG_CLI_RESOURCE__0","Component","Input","CommonModule","MatTableModule","MatCardModule","MatTabsModule","MatrixViewComponent","constructor","salesData","customerData","chartData","categoryRegionMatrix","categoryRegionColumns","regions","categories","ageSatisfactionMatrix","ageSatisfactionColumns","satisfactionLevels","monthCategoryMatrix","monthCategoryColumns","ngOnChanges","changes","updateMatrixData","buildCategoryRegionMatrix","buildAgeSatisfactionMatrix","buildMonthCategoryMatrix","Set","map","item","region","sort","category","row","total","forEach","sales","filter","reduce","sum","ageGroups","ageGroup","satisfaction","count","customer","age","isInAgeGroup","length","s","monthlyData","Map","date","Date","monthKey","getFullYear","getMonth","toString","padStart","has","set","monthData","get","currentValue","Array","from","entries","a","b","localeCompare","month","categoryData","formatCurrency","value","Intl","NumberFormat","style","currency","minimumFractionDigits","format","propDecorators","type","selector","standalone","imports","template","styles"],"sources":["/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.component.ts"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.component.ts.scss?ngResource!=!/home/a-tsu/data-analysys-by-claude/frontend/node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=CiAgICAubWF0cml4LWNvbnRhaW5lciB7CiAgICAgIG1hcmdpbi10b3A6IDE2cHg7CiAgICAgIG92ZXJmbG93LXg6IGF1dG87CiAgICB9CgogICAgLm1hdHJpeC10YWJsZSB7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBtaW4td2lkdGg6IDYwMHB4OwogICAgfQoKICAgIC50b3RhbC1jZWxsIHsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7CiAgICB9CgogICAgdGgubWF0LWhlYWRlci1jZWxsIHsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzZjUxYjU7CiAgICAgIGNvbG9yOiB3aGl0ZTsKICAgIH0KCiAgICB0ZC5tYXQtY2VsbCB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgcGFkZGluZzogOHB4OwogICAgfQoKICAgIHRoLm1hdC1oZWFkZXItY2VsbCB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgcGFkZGluZzogOHB4OwogICAgfQoKICAgIC5tYXQtdGFiLWdyb3VwIHsKICAgICAgbWFyZ2luLXRvcDogMTZweDsKICAgIH0KCiAgICAubWF0LXRhYi1ib2R5LWNvbnRlbnQgewogICAgICBwYWRkaW5nOiAxNnB4IDA7CiAgICB9CiAg!/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.component.ts\";\nimport { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nlet MatrixViewComponent = class MatrixViewComponent {\n    constructor() {\n        this.salesData = null;\n        this.customerData = null;\n        this.chartData = null;\n        // カテゴリ×地域マトリクス\n        this.categoryRegionMatrix = [];\n        this.categoryRegionColumns = [];\n        this.regions = [];\n        this.categories = [];\n        // 年齢層×満足度マトリクス\n        this.ageSatisfactionMatrix = [];\n        this.ageSatisfactionColumns = [];\n        this.satisfactionLevels = [1, 2, 3, 4, 5];\n        // 月別×カテゴリマトリクス\n        this.monthCategoryMatrix = [];\n        this.monthCategoryColumns = [];\n    }\n    ngOnChanges(changes) {\n        if (changes['salesData'] || changes['customerData'] || changes['chartData']) {\n            this.updateMatrixData();\n        }\n    }\n    updateMatrixData() {\n        if (this.salesData && this.customerData) {\n            this.buildCategoryRegionMatrix();\n            this.buildAgeSatisfactionMatrix();\n            this.buildMonthCategoryMatrix();\n        }\n    }\n    buildCategoryRegionMatrix() {\n        if (!this.salesData)\n            return;\n        // 地域とカテゴリの一覧を取得\n        this.regions = [...new Set(this.salesData.map(item => item.region))].sort();\n        this.categories = [...new Set(this.salesData.map(item => item.category))].sort();\n        // マトリクスデータを構築\n        this.categoryRegionMatrix = this.categories.map(category => {\n            const row = { category };\n            let total = 0;\n            this.regions.forEach(region => {\n                const sales = this.salesData\n                    .filter(item => item.category === category && item.region === region)\n                    .reduce((sum, item) => sum + item.sales, 0);\n                row[region] = sales;\n                total += sales;\n            });\n            row.total = total;\n            return row;\n        });\n        // カラム定義を設定\n        this.categoryRegionColumns = ['category', ...this.regions, 'total'];\n    }\n    buildAgeSatisfactionMatrix() {\n        if (!this.customerData)\n            return;\n        // 年齢層を定義\n        const ageGroups = ['18-29', '30-39', '40-49', '50-59', '60+'];\n        this.ageSatisfactionMatrix = ageGroups.map(ageGroup => {\n            const row = { ageGroup };\n            let total = 0;\n            this.satisfactionLevels.forEach(satisfaction => {\n                const count = this.customerData\n                    .filter(customer => {\n                    const age = customer.age;\n                    const isInAgeGroup = this.isInAgeGroup(age, ageGroup);\n                    return isInAgeGroup && customer.satisfaction === satisfaction;\n                }).length;\n                row[`satisfaction_${satisfaction}`] = count;\n                total += count;\n            });\n            row.total = total;\n            return row;\n        });\n        // カラム定義を設定\n        this.ageSatisfactionColumns = [\n            'ageGroup',\n            ...this.satisfactionLevels.map(s => `satisfaction_${s}`),\n            'total'\n        ];\n    }\n    buildMonthCategoryMatrix() {\n        if (!this.salesData)\n            return;\n        // 月別データを構築\n        const monthlyData = new Map();\n        this.salesData.forEach(item => {\n            const date = new Date(item.date);\n            const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n            if (!monthlyData.has(monthKey)) {\n                monthlyData.set(monthKey, new Map());\n            }\n            const monthData = monthlyData.get(monthKey);\n            const currentValue = monthData.get(item.category) || 0;\n            monthData.set(item.category, currentValue + item.sales);\n        });\n        // マトリクスデータを構築\n        this.monthCategoryMatrix = Array.from(monthlyData.entries())\n            .sort((a, b) => a[0].localeCompare(b[0]))\n            .map(([month, categoryData]) => {\n            const row = { month };\n            let total = 0;\n            this.categories.forEach(category => {\n                const sales = categoryData.get(category) || 0;\n                row[category] = sales;\n                total += sales;\n            });\n            row.total = total;\n            return row;\n        });\n        // カラム定義を設定\n        this.monthCategoryColumns = ['month', ...this.categories, 'total'];\n    }\n    isInAgeGroup(age, ageGroup) {\n        switch (ageGroup) {\n            case '18-29': return age >= 18 && age <= 29;\n            case '30-39': return age >= 30 && age <= 39;\n            case '40-49': return age >= 40 && age <= 49;\n            case '50-59': return age >= 50 && age <= 59;\n            case '60+': return age >= 60;\n            default: return false;\n        }\n    }\n    formatCurrency(value) {\n        if (!value)\n            return '¥0';\n        return new Intl.NumberFormat('ja-JP', {\n            style: 'currency',\n            currency: 'JPY',\n            minimumFractionDigits: 0\n        }).format(value);\n    }\n    static { this.propDecorators = {\n        salesData: [{ type: Input }],\n        customerData: [{ type: Input }],\n        chartData: [{ type: Input }]\n    }; }\n};\nMatrixViewComponent = __decorate([\n    Component({\n        selector: 'app-matrix-view',\n        standalone: true,\n        imports: [CommonModule, MatTableModule, MatCardModule, MatTabsModule],\n        template: `\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>マトリクス表示</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <mat-tab-group>\n          <!-- 売上カテゴリ × 地域マトリクス -->\n          <mat-tab label=\"カテゴリ×地域\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"categoryRegionMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"category\">\n                  <th mat-header-cell *matHeaderCellDef>カテゴリ</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.category}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let region of regions\" [matColumnDef]=\"region\">\n                  <th mat-header-cell *matHeaderCellDef>{{region}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{formatCurrency(element[region])}}\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{formatCurrency(element.total)}}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"categoryRegionColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: categoryRegionColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n\n          <!-- 年齢層 × 満足度マトリクス -->\n          <mat-tab label=\"年齢層×満足度\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"ageSatisfactionMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"ageGroup\">\n                  <th mat-header-cell *matHeaderCellDef>年齢層</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.ageGroup}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let satisfaction of satisfactionLevels\" [matColumnDef]=\"'satisfaction_' + satisfaction\">\n                  <th mat-header-cell *matHeaderCellDef>満足度{{satisfaction}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{element['satisfaction_' + satisfaction] || 0}}人\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{element.total}}人\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"ageSatisfactionColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: ageSatisfactionColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n\n          <!-- 月別 × カテゴリマトリクス -->\n          <mat-tab label=\"月別×カテゴリ\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"monthCategoryMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"month\">\n                  <th mat-header-cell *matHeaderCellDef>月</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.month}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let category of categories\" [matColumnDef]=\"category\">\n                  <th mat-header-cell *matHeaderCellDef>{{category}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{formatCurrency(element[category])}}\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{formatCurrency(element.total)}}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"monthCategoryColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: monthCategoryColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n        </mat-tab-group>\n      </mat-card-content>\n    </mat-card>\n  `,\n        styles: [__NG_CLI_RESOURCE__0]\n    })\n], MatrixViewComponent);\nexport { MatrixViewComponent };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}