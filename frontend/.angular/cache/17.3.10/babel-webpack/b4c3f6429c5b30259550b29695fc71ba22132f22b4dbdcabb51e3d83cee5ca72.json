{"ast":null,"code":"import { FilterPanelComponent } from './filter-panel.component';\nimport { DataService } from '../../services/data.service';\nimport { of } from 'rxjs';\nconst mockFilterOptions = {\n  categories: ['Electronics', 'Books', 'Clothing', 'Home', 'Sports'],\n  regions: ['東京', '大阪', '名古屋', '福岡', '札幌'],\n  sales_range: [0, 500000],\n  age_range: [18, 80],\n  genders: ['男性', '女性']\n};\n// Mock DataService\nclass MockDataService {\n  getFilterOptions() {\n    return of(mockFilterOptions);\n  }\n  updateFilters(filters) {\n    // Mock method\n  }\n}\nconst meta = {\n  title: 'Components/FilterPanel',\n  component: FilterPanelComponent,\n  parameters: {\n    layout: 'padded'\n  },\n  tags: ['autodocs'],\n  decorators: [story => ({\n    ...story(),\n    providers: [{\n      provide: DataService,\n      useClass: MockDataService\n    }]\n  })]\n};\nexport default meta;\nexport const Default = {};\nexport const WithLimitedOptions = {\n  decorators: [story => ({\n    ...story(),\n    providers: [{\n      provide: DataService,\n      useValue: {\n        getFilterOptions: () => of({\n          categories: ['Books', 'Electronics'],\n          regions: ['東京', '大阪'],\n          sales_range: [0, 100000],\n          age_range: [25, 65],\n          genders: ['男性', '女性']\n        }),\n        updateFilters: () => {}\n      }\n    }]\n  })]\n};\nexport const WithExtensiveOptions = {\n  decorators: [story => ({\n    ...story(),\n    providers: [{\n      provide: DataService,\n      useValue: {\n        getFilterOptions: () => of({\n          categories: ['Electronics', 'Books', 'Clothing', 'Home', 'Sports', 'Automotive', 'Health', 'Beauty', 'Toys', 'Garden'],\n          regions: ['東京', '大阪', '名古屋', '福岡', '札幌', '広島', '仙台', '神戸', '京都', '横浜'],\n          sales_range: [0, 1000000],\n          age_range: [16, 85],\n          genders: ['男性', '女性', 'その他']\n        }),\n        updateFilters: () => {}\n      }\n    }]\n  })]\n};\nexport const EmptyOptions = {\n  decorators: [story => ({\n    ...story(),\n    providers: [{\n      provide: DataService,\n      useValue: {\n        getFilterOptions: () => of({\n          categories: [],\n          regions: [],\n          sales_range: [0, 0],\n          age_range: [0, 0],\n          genders: []\n        }),\n        updateFilters: () => {}\n      }\n    }]\n  })]\n};","map":{"version":3,"names":["FilterPanelComponent","DataService","of","mockFilterOptions","categories","regions","sales_range","age_range","genders","MockDataService","getFilterOptions","updateFilters","filters","meta","title","component","parameters","layout","tags","decorators","story","providers","provide","useClass","Default","WithLimitedOptions","useValue","WithExtensiveOptions","EmptyOptions"],"sources":["/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/filter-panel/filter-panel.stories.ts"],"sourcesContent":["import { FilterPanelComponent } from './filter-panel.component';\nimport { DataService } from '../../services/data.service';\nimport { of } from 'rxjs';\nconst mockFilterOptions = {\n    categories: ['Electronics', 'Books', 'Clothing', 'Home', 'Sports'],\n    regions: ['東京', '大阪', '名古屋', '福岡', '札幌'],\n    sales_range: [0, 500000],\n    age_range: [18, 80],\n    genders: ['男性', '女性']\n};\n// Mock DataService\nclass MockDataService {\n    getFilterOptions() {\n        return of(mockFilterOptions);\n    }\n    updateFilters(filters) {\n        // Mock method\n    }\n}\nconst meta = {\n    title: 'Components/FilterPanel',\n    component: FilterPanelComponent,\n    parameters: {\n        layout: 'padded',\n    },\n    tags: ['autodocs'],\n    decorators: [\n        (story) => ({\n            ...story(),\n            providers: [\n                { provide: DataService, useClass: MockDataService }\n            ],\n        }),\n    ],\n};\nexport default meta;\nexport const Default = {};\nexport const WithLimitedOptions = {\n    decorators: [\n        (story) => ({\n            ...story(),\n            providers: [\n                {\n                    provide: DataService,\n                    useValue: {\n                        getFilterOptions: () => of({\n                            categories: ['Books', 'Electronics'],\n                            regions: ['東京', '大阪'],\n                            sales_range: [0, 100000],\n                            age_range: [25, 65],\n                            genders: ['男性', '女性']\n                        }),\n                        updateFilters: () => { }\n                    }\n                }\n            ],\n        }),\n    ],\n};\nexport const WithExtensiveOptions = {\n    decorators: [\n        (story) => ({\n            ...story(),\n            providers: [\n                {\n                    provide: DataService,\n                    useValue: {\n                        getFilterOptions: () => of({\n                            categories: ['Electronics', 'Books', 'Clothing', 'Home', 'Sports', 'Automotive', 'Health', 'Beauty', 'Toys', 'Garden'],\n                            regions: ['東京', '大阪', '名古屋', '福岡', '札幌', '広島', '仙台', '神戸', '京都', '横浜'],\n                            sales_range: [0, 1000000],\n                            age_range: [16, 85],\n                            genders: ['男性', '女性', 'その他']\n                        }),\n                        updateFilters: () => { }\n                    }\n                }\n            ],\n        }),\n    ],\n};\nexport const EmptyOptions = {\n    decorators: [\n        (story) => ({\n            ...story(),\n            providers: [\n                {\n                    provide: DataService,\n                    useValue: {\n                        getFilterOptions: () => of({\n                            categories: [],\n                            regions: [],\n                            sales_range: [0, 0],\n                            age_range: [0, 0],\n                            genders: []\n                        }),\n                        updateFilters: () => { }\n                    }\n                }\n            ],\n        }),\n    ],\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}