{"ast":null,"code":"import { DataTablesComponent } from './data-tables.component';\nconst meta = {\n  title: 'Components/DataTables',\n  component: DataTablesComponent,\n  parameters: {\n    layout: 'padded'\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    salesData: {\n      description: '売上データの配列',\n      control: {\n        type: 'object'\n      }\n    },\n    customerData: {\n      description: '顧客データの配列',\n      control: {\n        type: 'object'\n      }\n    }\n  }\n};\nexport default meta;\nconst sampleSalesData = [{\n  date: '2024-01-15',\n  sales: 125000,\n  category: 'Electronics',\n  region: '東京'\n}, {\n  date: '2024-01-16',\n  sales: 89000,\n  category: 'Books',\n  region: '大阪'\n}, {\n  date: '2024-01-17',\n  sales: 156000,\n  category: 'Clothing',\n  region: '名古屋'\n}, {\n  date: '2024-01-18',\n  sales: 203000,\n  category: 'Home',\n  region: '福岡'\n}, {\n  date: '2024-01-19',\n  sales: 97000,\n  category: 'Sports',\n  region: '札幌'\n}];\nconst sampleCustomerData = [{\n  customer_id: 1,\n  age: 28,\n  gender: '男性',\n  purchase_amount: 125000,\n  satisfaction: 4\n}, {\n  customer_id: 2,\n  age: 35,\n  gender: '女性',\n  purchase_amount: 89000,\n  satisfaction: 5\n}, {\n  customer_id: 3,\n  age: 42,\n  gender: '男性',\n  purchase_amount: 156000,\n  satisfaction: 3\n}, {\n  customer_id: 4,\n  age: 29,\n  gender: '女性',\n  purchase_amount: 203000,\n  satisfaction: 2\n}, {\n  customer_id: 5,\n  age: 38,\n  gender: '男性',\n  purchase_amount: 97000,\n  satisfaction: 5\n}];\n// Generate more sample data for pagination testing\nconst generateSalesData = count => {\n  const categories = ['Electronics', 'Books', 'Clothing', 'Home', 'Sports'];\n  const regions = ['東京', '大阪', '名古屋', '福岡', '札幌'];\n  return Array.from({\n    length: count\n  }, (_, i) => ({\n    date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    sales: Math.floor(Math.random() * 500000) + 50000,\n    category: categories[Math.floor(Math.random() * categories.length)],\n    region: regions[Math.floor(Math.random() * regions.length)]\n  }));\n};\nconst generateCustomerData = count => {\n  const genders = ['男性', '女性'];\n  return Array.from({\n    length: count\n  }, (_, i) => ({\n    customer_id: i + 1,\n    age: Math.floor(Math.random() * 50) + 20,\n    gender: genders[Math.floor(Math.random() * genders.length)],\n    purchase_amount: Math.floor(Math.random() * 500000) + 10000,\n    satisfaction: Math.floor(Math.random() * 5) + 1\n  }));\n};\nexport const Default = {\n  args: {\n    salesData: sampleSalesData,\n    customerData: sampleCustomerData\n  }\n};\nexport const LargeDataset = {\n  args: {\n    salesData: generateSalesData(150),\n    customerData: generateCustomerData(150)\n  }\n};\nexport const SmallDataset = {\n  args: {\n    salesData: sampleSalesData.slice(0, 2),\n    customerData: sampleCustomerData.slice(0, 2)\n  }\n};\nexport const HighSatisfactionData = {\n  args: {\n    salesData: sampleSalesData,\n    customerData: sampleCustomerData.map(customer => ({\n      ...customer,\n      satisfaction: Math.floor(Math.random() * 2) + 4 // 4-5\n    }))\n  }\n};\nexport const LowSatisfactionData = {\n  args: {\n    salesData: sampleSalesData,\n    customerData: sampleCustomerData.map(customer => ({\n      ...customer,\n      satisfaction: Math.floor(Math.random() * 2) + 1 // 1-2\n    }))\n  }\n};\nexport const EmptyData = {\n  args: {\n    salesData: [],\n    customerData: []\n  }\n};\nexport const NullData = {\n  args: {\n    salesData: null,\n    customerData: null\n  }\n};","map":{"version":3,"names":["DataTablesComponent","meta","title","component","parameters","layout","tags","argTypes","salesData","description","control","type","customerData","sampleSalesData","date","sales","category","region","sampleCustomerData","customer_id","age","gender","purchase_amount","satisfaction","generateSalesData","count","categories","regions","Array","from","length","_","i","Date","now","toISOString","split","Math","floor","random","generateCustomerData","genders","Default","args","LargeDataset","SmallDataset","slice","HighSatisfactionData","map","customer","LowSatisfactionData","EmptyData","NullData"],"sources":["/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/data-tables/data-tables.stories.ts"],"sourcesContent":["import { DataTablesComponent } from './data-tables.component';\nconst meta = {\n    title: 'Components/DataTables',\n    component: DataTablesComponent,\n    parameters: {\n        layout: 'padded',\n    },\n    tags: ['autodocs'],\n    argTypes: {\n        salesData: {\n            description: '売上データの配列',\n            control: { type: 'object' },\n        },\n        customerData: {\n            description: '顧客データの配列',\n            control: { type: 'object' },\n        },\n    },\n};\nexport default meta;\nconst sampleSalesData = [\n    {\n        date: '2024-01-15',\n        sales: 125000,\n        category: 'Electronics',\n        region: '東京'\n    },\n    {\n        date: '2024-01-16',\n        sales: 89000,\n        category: 'Books',\n        region: '大阪'\n    },\n    {\n        date: '2024-01-17',\n        sales: 156000,\n        category: 'Clothing',\n        region: '名古屋'\n    },\n    {\n        date: '2024-01-18',\n        sales: 203000,\n        category: 'Home',\n        region: '福岡'\n    },\n    {\n        date: '2024-01-19',\n        sales: 97000,\n        category: 'Sports',\n        region: '札幌'\n    },\n];\nconst sampleCustomerData = [\n    {\n        customer_id: 1,\n        age: 28,\n        gender: '男性',\n        purchase_amount: 125000,\n        satisfaction: 4\n    },\n    {\n        customer_id: 2,\n        age: 35,\n        gender: '女性',\n        purchase_amount: 89000,\n        satisfaction: 5\n    },\n    {\n        customer_id: 3,\n        age: 42,\n        gender: '男性',\n        purchase_amount: 156000,\n        satisfaction: 3\n    },\n    {\n        customer_id: 4,\n        age: 29,\n        gender: '女性',\n        purchase_amount: 203000,\n        satisfaction: 2\n    },\n    {\n        customer_id: 5,\n        age: 38,\n        gender: '男性',\n        purchase_amount: 97000,\n        satisfaction: 5\n    },\n];\n// Generate more sample data for pagination testing\nconst generateSalesData = (count) => {\n    const categories = ['Electronics', 'Books', 'Clothing', 'Home', 'Sports'];\n    const regions = ['東京', '大阪', '名古屋', '福岡', '札幌'];\n    return Array.from({ length: count }, (_, i) => ({\n        date: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        sales: Math.floor(Math.random() * 500000) + 50000,\n        category: categories[Math.floor(Math.random() * categories.length)],\n        region: regions[Math.floor(Math.random() * regions.length)]\n    }));\n};\nconst generateCustomerData = (count) => {\n    const genders = ['男性', '女性'];\n    return Array.from({ length: count }, (_, i) => ({\n        customer_id: i + 1,\n        age: Math.floor(Math.random() * 50) + 20,\n        gender: genders[Math.floor(Math.random() * genders.length)],\n        purchase_amount: Math.floor(Math.random() * 500000) + 10000,\n        satisfaction: Math.floor(Math.random() * 5) + 1\n    }));\n};\nexport const Default = {\n    args: {\n        salesData: sampleSalesData,\n        customerData: sampleCustomerData,\n    },\n};\nexport const LargeDataset = {\n    args: {\n        salesData: generateSalesData(150),\n        customerData: generateCustomerData(150),\n    },\n};\nexport const SmallDataset = {\n    args: {\n        salesData: sampleSalesData.slice(0, 2),\n        customerData: sampleCustomerData.slice(0, 2),\n    },\n};\nexport const HighSatisfactionData = {\n    args: {\n        salesData: sampleSalesData,\n        customerData: sampleCustomerData.map(customer => ({\n            ...customer,\n            satisfaction: Math.floor(Math.random() * 2) + 4 // 4-5\n        })),\n    },\n};\nexport const LowSatisfactionData = {\n    args: {\n        salesData: sampleSalesData,\n        customerData: sampleCustomerData.map(customer => ({\n            ...customer,\n            satisfaction: Math.floor(Math.random() * 2) + 1 // 1-2\n        })),\n    },\n};\nexport const EmptyData = {\n    args: {\n        salesData: [],\n        customerData: [],\n    },\n};\nexport const NullData = {\n    args: {\n        salesData: null,\n        customerData: null,\n    },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}