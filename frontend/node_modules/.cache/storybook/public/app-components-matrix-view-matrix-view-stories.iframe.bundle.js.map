{"version":3,"file":"app-components-matrix-view-matrix-view-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxpVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://data-analysis-frontend/./src/app/components/matrix-view/matrix-view.component.ts","webpack://data-analysis-frontend/","webpack://data-analysis-frontend/./src/app/components/matrix-view/matrix-view.component.ts?21d7"],"sourcesContent":["import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.component.ts.scss?ngResource!=!/home/a-tsu/data-analysys-by-claude/frontend/node_modules/@ngtools/webpack/src/loaders/inline-resource.js?data=CiAgICAubWF0cml4LWNvbnRhaW5lciB7CiAgICAgIG1hcmdpbi10b3A6IDE2cHg7CiAgICAgIG92ZXJmbG93LXg6IGF1dG87CiAgICB9CgogICAgLm1hdHJpeC10YWJsZSB7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBtaW4td2lkdGg6IDYwMHB4OwogICAgfQoKICAgIC50b3RhbC1jZWxsIHsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7CiAgICB9CgogICAgdGgubWF0LWhlYWRlci1jZWxsIHsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIGJhY2tncm91bmQtY29sb3I6ICMzZjUxYjU7CiAgICAgIGNvbG9yOiB3aGl0ZTsKICAgIH0KCiAgICB0ZC5tYXQtY2VsbCB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgcGFkZGluZzogOHB4OwogICAgfQoKICAgIHRoLm1hdC1oZWFkZXItY2VsbCB7CiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgcGFkZGluZzogOHB4OwogICAgfQoKICAgIC5tYXQtdGFiLWdyb3VwIHsKICAgICAgbWFyZ2luLXRvcDogMTZweDsKICAgIH0KCiAgICAubWF0LXRhYi1ib2R5LWNvbnRlbnQgewogICAgICBwYWRkaW5nOiAxNnB4IDA7CiAgICB9CiAg!/home/a-tsu/data-analysys-by-claude/frontend/src/app/components/matrix-view/matrix-view.component.ts\";\nimport { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatTabsModule } from '@angular/material/tabs';\nlet MatrixViewComponent = class MatrixViewComponent {\n    constructor() {\n        this.salesData = null;\n        this.customerData = null;\n        this.chartData = null;\n        // カテゴリ×地域マトリクス\n        this.categoryRegionMatrix = [];\n        this.categoryRegionColumns = [];\n        this.regions = [];\n        this.categories = [];\n        // 年齢層×満足度マトリクス\n        this.ageSatisfactionMatrix = [];\n        this.ageSatisfactionColumns = [];\n        this.satisfactionLevels = [1, 2, 3, 4, 5];\n        // 月別×カテゴリマトリクス\n        this.monthCategoryMatrix = [];\n        this.monthCategoryColumns = [];\n    }\n    ngOnChanges(changes) {\n        if (changes['salesData'] || changes['customerData'] || changes['chartData']) {\n            this.updateMatrixData();\n        }\n    }\n    updateMatrixData() {\n        if (this.salesData && this.customerData) {\n            this.buildCategoryRegionMatrix();\n            this.buildAgeSatisfactionMatrix();\n            this.buildMonthCategoryMatrix();\n        }\n    }\n    buildCategoryRegionMatrix() {\n        if (!this.salesData)\n            return;\n        // 地域とカテゴリの一覧を取得\n        this.regions = [...new Set(this.salesData.map(item => item.region))].sort();\n        this.categories = [...new Set(this.salesData.map(item => item.category))].sort();\n        // マトリクスデータを構築\n        this.categoryRegionMatrix = this.categories.map(category => {\n            const row = { category };\n            let total = 0;\n            this.regions.forEach(region => {\n                const sales = this.salesData\n                    .filter(item => item.category === category && item.region === region)\n                    .reduce((sum, item) => sum + item.sales, 0);\n                row[region] = sales;\n                total += sales;\n            });\n            row.total = total;\n            return row;\n        });\n        // カラム定義を設定\n        this.categoryRegionColumns = ['category', ...this.regions, 'total'];\n    }\n    buildAgeSatisfactionMatrix() {\n        if (!this.customerData)\n            return;\n        // 年齢層を定義\n        const ageGroups = ['18-29', '30-39', '40-49', '50-59', '60+'];\n        this.ageSatisfactionMatrix = ageGroups.map(ageGroup => {\n            const row = { ageGroup };\n            let total = 0;\n            this.satisfactionLevels.forEach(satisfaction => {\n                const count = this.customerData\n                    .filter(customer => {\n                    const age = customer.age;\n                    const isInAgeGroup = this.isInAgeGroup(age, ageGroup);\n                    return isInAgeGroup && customer.satisfaction === satisfaction;\n                }).length;\n                row[`satisfaction_${satisfaction}`] = count;\n                total += count;\n            });\n            row.total = total;\n            return row;\n        });\n        // カラム定義を設定\n        this.ageSatisfactionColumns = [\n            'ageGroup',\n            ...this.satisfactionLevels.map(s => `satisfaction_${s}`),\n            'total'\n        ];\n    }\n    buildMonthCategoryMatrix() {\n        if (!this.salesData)\n            return;\n        // 月別データを構築\n        const monthlyData = new Map();\n        this.salesData.forEach(item => {\n            const date = new Date(item.date);\n            const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;\n            if (!monthlyData.has(monthKey)) {\n                monthlyData.set(monthKey, new Map());\n            }\n            const monthData = monthlyData.get(monthKey);\n            const currentValue = monthData.get(item.category) || 0;\n            monthData.set(item.category, currentValue + item.sales);\n        });\n        // マトリクスデータを構築\n        this.monthCategoryMatrix = Array.from(monthlyData.entries())\n            .sort((a, b) => a[0].localeCompare(b[0]))\n            .map(([month, categoryData]) => {\n            const row = { month };\n            let total = 0;\n            this.categories.forEach(category => {\n                const sales = categoryData.get(category) || 0;\n                row[category] = sales;\n                total += sales;\n            });\n            row.total = total;\n            return row;\n        });\n        // カラム定義を設定\n        this.monthCategoryColumns = ['month', ...this.categories, 'total'];\n    }\n    isInAgeGroup(age, ageGroup) {\n        switch (ageGroup) {\n            case '18-29': return age >= 18 && age <= 29;\n            case '30-39': return age >= 30 && age <= 39;\n            case '40-49': return age >= 40 && age <= 49;\n            case '50-59': return age >= 50 && age <= 59;\n            case '60+': return age >= 60;\n            default: return false;\n        }\n    }\n    formatCurrency(value) {\n        if (!value)\n            return '¥0';\n        return new Intl.NumberFormat('ja-JP', {\n            style: 'currency',\n            currency: 'JPY',\n            minimumFractionDigits: 0\n        }).format(value);\n    }\n    static { this.propDecorators = {\n        salesData: [{ type: Input }],\n        customerData: [{ type: Input }],\n        chartData: [{ type: Input }]\n    }; }\n};\nMatrixViewComponent = __decorate([\n    Component({\n        selector: 'app-matrix-view',\n        standalone: true,\n        imports: [CommonModule, MatTableModule, MatCardModule, MatTabsModule],\n        template: `\n    <mat-card>\n      <mat-card-header>\n        <mat-card-title>マトリクス表示</mat-card-title>\n      </mat-card-header>\n      <mat-card-content>\n        <mat-tab-group>\n          <!-- 売上カテゴリ × 地域マトリクス -->\n          <mat-tab label=\"カテゴリ×地域\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"categoryRegionMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"category\">\n                  <th mat-header-cell *matHeaderCellDef>カテゴリ</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.category}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let region of regions\" [matColumnDef]=\"region\">\n                  <th mat-header-cell *matHeaderCellDef>{{region}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{formatCurrency(element[region])}}\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{formatCurrency(element.total)}}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"categoryRegionColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: categoryRegionColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n\n          <!-- 年齢層 × 満足度マトリクス -->\n          <mat-tab label=\"年齢層×満足度\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"ageSatisfactionMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"ageGroup\">\n                  <th mat-header-cell *matHeaderCellDef>年齢層</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.ageGroup}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let satisfaction of satisfactionLevels\" [matColumnDef]=\"'satisfaction_' + satisfaction\">\n                  <th mat-header-cell *matHeaderCellDef>満足度{{satisfaction}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{element['satisfaction_' + satisfaction] || 0}}人\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{element.total}}人\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"ageSatisfactionColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: ageSatisfactionColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n\n          <!-- 月別 × カテゴリマトリクス -->\n          <mat-tab label=\"月別×カテゴリ\">\n            <div class=\"matrix-container\">\n              <table mat-table [dataSource]=\"monthCategoryMatrix\" class=\"matrix-table\">\n                <ng-container matColumnDef=\"month\">\n                  <th mat-header-cell *matHeaderCellDef>月</th>\n                  <td mat-cell *matCellDef=\"let element\">{{element.month}}</td>\n                </ng-container>\n                \n                <ng-container *ngFor=\"let category of categories\" [matColumnDef]=\"category\">\n                  <th mat-header-cell *matHeaderCellDef>{{category}}</th>\n                  <td mat-cell *matCellDef=\"let element\">\n                    {{formatCurrency(element[category])}}\n                  </td>\n                </ng-container>\n                \n                <ng-container matColumnDef=\"total\">\n                  <th mat-header-cell *matHeaderCellDef>合計</th>\n                  <td mat-cell *matCellDef=\"let element\" class=\"total-cell\">\n                    {{formatCurrency(element.total)}}\n                  </td>\n                </ng-container>\n\n                <tr mat-header-row *matHeaderRowDef=\"monthCategoryColumns\"></tr>\n                <tr mat-row *matRowDef=\"let row; columns: monthCategoryColumns;\"></tr>\n              </table>\n            </div>\n          </mat-tab>\n        </mat-tab-group>\n      </mat-card-content>\n    </mat-card>\n  `,\n        styles: [__NG_CLI_RESOURCE__0]\n    })\n], MatrixViewComponent);\nexport { MatrixViewComponent };\n",null,"// Imports\nvar ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/noSourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.matrix-container {\n  margin-top: 16px;\n  overflow-x: auto;\n}\n\n.matrix-table {\n  width: 100%;\n  min-width: 600px;\n}\n\n.total-cell {\n  font-weight: bold;\n  background-color: #f5f5f5;\n}\n\nth.mat-header-cell {\n  font-weight: bold;\n  background-color: #3f51b5;\n  color: white;\n}\n\ntd.mat-cell {\n  text-align: center;\n  padding: 8px;\n}\n\nth.mat-header-cell {\n  text-align: center;\n  padding: 8px;\n}\n\n.mat-tab-group {\n  margin-top: 16px;\n}\n\n.mat-tab-body-content {\n  padding: 16px 0;\n}`, \"\"]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___.toString();\n"],"names":[],"sourceRoot":""}